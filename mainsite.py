import streamlit as st

from functions import get_query_param, set_query_param, read_in_cards, show_all_cards

szabaly = """
### üé≤ Az √©n kicsi p√°rtom ‚Äì J√°t√©kszab√°lyok

**Le√≠r√°s**  
Ez egy minimum h√°rom f≈ëvel j√°tszhat√≥, tervez√©s alatt √°ll√≥ k√°rtyaj√°t√©k online verzi√≥ja, amely a politikai n√©zetek √©s √©rvek j√°t√©kos √ºtk√∂ztet√©s√©re √©p√ºl. A j√°t√©k sor√°n egy k√©pzeletbeli jobbos vagy balos p√°rt politikus√°nak b≈ër√©be b√∫jva kamp√°nyt√©m√°kat h√∫ztok, √©s azok mellett vagy ellen kell √©rvelnetek ‚Äì n√©ha m√©g a saj√°t vagy v√°lasztott politikai meggy≈ëz≈ëd√©setekkel szembemenve is.

**C√©l**  
Gy≈±jtsd a legt√∂bb szavazatot √©rveid meggy≈ëz≈ë erej√©vel! Aki a legt√∂bb pontot szerzi a j√°t√©k v√©g√©re, megnyeri a v√°laszt√°sokat.

---

### üë• J√°t√©kosok

- A j√°t√©khoz minimum h√°rom j√°t√©kos sz√ºks√©ges.
- Az egyik j√°t√©kos **baloldali**, a m√°sik **jobboldali** n√©zetet k√©pvisel. A t√∂bbiek a szavaz√≥k szerep√©t t√∂ltik be. - üí° *Tipp:* Akkor a legsz√≥rakoztat√≥bb, ha a saj√°t meggy≈ëz≈ëd√©seddel **ellent√©tes** oldalt v√°lasztasz.


---

### üÉè A k√°rty√°k

- Minden k√°rtya egy politikai kamp√°nyt√©m√°t tartalmaz.
- A k√°rty√°khoz pontszorz√≥k is tartoznak, att√≥l f√ºgg≈ëen, hogy melyik oldal sz√°m√°ra el≈ëny√∂s a t√©ma, illetve hogy a j√°t√©kos √©pp mellette vagy ellene √©rvel.  
  P√©ld√°ul: egy baloldali n√©z≈ëpont√∫ j√°t√©kos sz√°m√°ra egy balos t√©ma melletti √©rvel√©s nem j√°r szorz√≥val, de ha ugyanezen a t√©ma mellett egy jobboldali j√°t√©kos √©rvel meggy≈ëz≈ëen, b√≥nuszszorz√≥t kap. Ugyanez ford√≠tva is igaz: jobboldali n√©z≈ëpontb√≥l egy jobbos t√©ma ellen √©rvelve is szorz√≥t kaphatsz, ha √≠gy is k√©pes vagy szavazatokat szerezni.

---

### üîÅ A j√°t√©k menete

1. **Be√°ll√≠t√°sok:**
   - √Åll√≠ts√°tok be a j√°t√©kosok neveit √©s n√©zeteit (balos vagy jobbos).
   - D√∂nts√©tek el, h√°ny k√∂rt j√°tszotok (1‚Äì10).
   - V√°lassz√°tok ki, hogy minden k√∂rben a j√°t√©kosok **a t√©ma mellett vagy ellene √©rvelnek**. Ez v√©gig ugyanaz marad.

2. **K√∂r√∂k:**
   - Minden k√∂r elej√©n a j√°t√©k h√∫z egy kamp√°nyk√°rty√°t.
   - Mindk√©t j√°t√©kos r√∂viden √©rvel sz√≥ban a j√°t√©k be√°ll√≠t√°sa szerint (mellette vagy ellene).
   - A v√°laszt√≥k szavaznak: mindenki 1 szavazatot adhat le.
   - A szavazatokb√≥l pontok keletkeznek az adott k√°rty√°n szerepl≈ë szorz√≥k alapj√°n.

3. **Pontoz√°s:**
   - A j√°t√©k automatikusan kisz√°molja a pontokat.
   - A pontok k√∂r√∂nk√©nt √∂sszead√≥dnak.

---

### üèÜ A j√°t√©k v√©ge

- Az utols√≥ k√∂r ut√°n a j√°t√©k automatikusan ki√≠rja a nyertest.
- A gy≈ëztes az, aki a legt√∂bb pontot szerezte.


### A szer≈ë √ºzenete

- A pontoz√°s s√∫lyoz√°sa √©s a k√°rty√°k tartalma felt√∂lt√©s alatt √°ll, √©s a j√°t√©k folyamatosan fejl≈ëdik. Sz√≥val szinte biztos, hogy a j√°t√©k sor√°n tal√°lkozni fogtok hib√°kkal, vagy olyan k√°rty√°kkal, amelyek teljesen nem illenek a j√©t√°kba. 

###### √ñtleted vagy visszajelz√©sed van?  
√çrd meg a [GitHub-oldalon](https://github.com/csipapicsa/MyLittleParty/discussions), a [Discord szerveren](https://discord.gg/AtnQJ6YcYA), vagy k√ºldd el e-mailben: **gergo pont gyori[kukac]gmail.com**

---
"""




import streamlit.components.v1 as components
def scroll_to_top():
    """F√ºggv√©ny az oldal tetej√©re val√≥ ugr√°shoz"""
    components.html("""
        <script>
            window.parent.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        </script>
    """, height=0)

@st.fragment
def game_logic():

    if "current_card" not in st.session_state:
        st.session_state.current_card = st.session_state.cards.sample().iloc[0]
        scroll_to_top()
        st.components.v1.html("""
            <script>
                window.parent.scrollTo(0, 0);
            </script>
        """, height=0)

    card = st.session_state.current_card
    # st.table(card)
    side = get_query_param('side')

    # if card["T√≠pus - HUN"] == "Kamp√°ny":
    #     mode = "erveles"
    # else:
    #     mode = "reagalas"

    if side == "Mellette":
        jobbos_bonus = card['Jobbos bonus']
        balos_bonus = card['Balos Bonus']
        hogyan = "mellette"
    elif side == "Ellene":
        jobbos_bonus = card['Balos Bonus']
        balos_bonus = card['Jobbos bonus']
        hogyan = "ellene"
    # elif mode == "reagalas":
    #     # TODO 
    #     jobbos_bonus = card['Jobbos bonus']
    #     balos_bonus = card['Balos Bonus']
        # hogyan = "reag√°ljatok a k√°rty√°ra"


    # choose a random card from the cards dataframe

    st.session_state.rounds = int(get_query_param("rounds"))

    st.markdown(f"#### K√∂r {st.session_state.rounds_current} / {st.session_state.rounds}")

    st.markdown(f"#### **T√©ma:** *{card['K√°rtya le√≠r√°s HUN']}*")
    st.markdown(f"#### **T√≠pus:** *{card['T√≠pus - HUN']}*")
    
    st.divider()

    # if mode == "erveles":
    #     st.markdown(f" ### √ârveljetek  {hogyan}! ")
    # else:
    #     st.markdown(f" ### Reag√°ljatok! ")

    st.markdown(f" #### √ârveljetek  {hogyan}! ")    
    c1, c2 = st.columns(2)

    with c1:
        st.markdown(f"#### **Balos szavazati bonus:** \n\n ### {balos_bonus} x")
    with c2:
        st.markdown(f"#### **Jobbos szavazati bonus:** \n\n ### {jobbos_bonus} x")

    st.divider()


    c1, c2 = st.columns(2)

    round_key_suffix = f"_round_{st.session_state.rounds_current}"
    if st.session_state.player_1_view == "Balos":
        with c1:
            szavazatok_player_1 = st.number_input(
                f"#### {st.session_state.player_1_name} szavazatai",
                min_value=0,
                max_value=5,
                value=0,
                key=f"player_1_votes{round_key_suffix}"
            )
        with c2:
            szavazatok_player_2 = st.number_input(
                f"#### {st.session_state.player_2_name} szavazatai",
                min_value=0,
                max_value=5,
                value=0,
                key=f"player_2_votes{round_key_suffix}"
            )
    else:
        with c1:
            szavazatok_player_2 = st.number_input(
                f"#### {st.session_state.player_2_name} szavazatai",
                min_value=0,
                max_value=5,
                value=0,
                key=f"player_2_votes{round_key_suffix}"
            )
        with c2:
            szavazatok_player_1 = st.number_input(
                f"#### {st.session_state.player_1_name} szavazatai",
                min_value=0,
                max_value=5,
                value=0,
                key=f"player_1_votes{round_key_suffix}"
            )


    st.divider()

    st.markdown("#### **J√°t√©kosok pontjai**")

    pontok_container = st.container()

    with pontok_container:
        c1, c2 = st.columns(2)
        if st.session_state.player_1_view == "Balos":
            with c1:
                _player_1_name = get_query_param("player_1_name")
                _player_1_points = get_query_param("player_1_points")
                st.markdown(f"#### **{_player_1_name}** ({st.session_state.player_1_view}): {_player_1_points} pont")

            with c2:
                _player_2_name = get_query_param("player_2_name")
                _player_2_points = get_query_param("player_2_points")
                st.markdown(f"#### **{_player_2_name}** ({st.session_state.player_2_view}): {_player_2_points} pont")

        else:
            with c1:
                _player_2_name = get_query_param("player_2_name")
                _player_2_points = get_query_param("player_2_points")
                st.markdown(f"#### **{_player_2_name}** ({st.session_state.player_2_view}): {_player_2_points} pont")

            with c2:
                _player_1_name = get_query_param("player_1_name")
                _player_1_points = get_query_param("player_1_points")
                st.markdown(f"#### **{_player_1_name}** ({st.session_state.player_1_view}): {_player_1_points} pont")

    # st.balloons()

    if st.button("Szavazatok r√∂gz√≠t√©se"):
        _temp_pont_1 = szavazatok_player_1 * jobbos_bonus
        _temp_pont_2 = szavazatok_player_2 * balos_bonus
        _current_player_1_points = get_query_param("player_1_points")
        _current_player_2_points = get_query_param("player_2_points")
        set_query_param("player_1_points", int(_current_player_1_points) + int(_temp_pont_1))
        set_query_param("player_2_points", int(_current_player_2_points) + int(_temp_pont_2))
        del st.session_state.current_card
        
        vote_keys_to_delete = [key for key in st.session_state.keys() if key.startswith(('player_1_votes', 'player_2_votes'))]
        for key in vote_keys_to_delete:
            del st.session_state[key]
        # st.info("M√©g nem vagyunk itt")
        # st.info(st.session_state.rounds_current)
        # st.info(st.session_state.rounds)
        # st.info(int(st.session_state.rounds_current) == int(st.session_state.rounds))
        if st.session_state.rounds_current == st.session_state.rounds:
            # st.info("Na itt vagyunk e")
            # get winner
            _player_1_points = get_query_param("player_1_points")
            _player_2_points = get_query_param("player_2_points")
            if int(_player_1_points) > int(_player_2_points):
                st.success(f"{st.session_state.player_1_name} nyert {int(_player_1_points)} ponttal!")
            elif int(_player_1_points) < int(_player_2_points):
                st.success(f"{st.session_state.player_2_name} nyert {int(_player_2_points)} ponttal!")
            else:
                st.success("D√∂ntetlen!")
            st.balloons()
            # v√©gs≈ë pontok ki√≠r√°sa
            st.markdown(f"## **{st.session_state.player_1_name}** ({st.session_state.player_1_view}): {_player_1_points} pont")
            st.markdown(f"## **{st.session_state.player_2_name}** ({st.session_state.player_2_view}): {_player_2_points} pont")
            
            import time
            time.sleep(10)
            # st.stop()

        else:
            st.session_state.rounds_current += 1
            set_query_param("rounds_current", st.session_state.rounds_current)
            set_query_param("page", "game")

        st.rerun()





def main():
    st.markdown("#### Az √©n kicsi p√°rtom k√°rtyaj√°t√©k - teszt oldal")

    tab_names = ["Szab√°lyok", "Be√°ll√≠t√°sok", "J√°t√©k", "K√°rtya √∂tletek"]
    tab_keys = ["szabaly", "settings", "game", "card_ideas"]

    # Get page from query, default to "szabaly"
    page = get_query_param("page")
    if page not in tab_keys:
        page = "szabaly"

    selected_index = tab_keys.index(page)

    # Use radio to simulate tabs
    selected_tab = st.radio(
        "V√°lassz lapot:",
        tab_names,
        index=selected_index,
        horizontal=True,
        label_visibility="collapsed"
    )

    # Update query param when user changes tab
    new_page = tab_keys[tab_names.index(selected_tab)]
    if new_page != page:
        set_query_param("page", new_page)
        st.rerun()

    # Content logic
    if new_page == "szabaly":
        st.markdown(szabaly)
    elif new_page == "settings":
        st.markdown("#### Be√°ll√≠t√°sok")
        options = ["Balos", "Jobbos"]

        cm1, cm2 = st.columns(2)
        with cm1:
            j√°t√©kos_1_neve = st.text_input("J√°t√©kos 1 neve", value=get_query_param("player_1_name"))
            _jat√©kos_1_politikai_n√©zete = get_query_param("player_1_view")
            if _jat√©kos_1_politikai_n√©zete == "_":
                _jat√©kos_1_politikai_n√©zete = "Balos"
            j√°t√©kos_1_politikai_n√©zete = st.selectbox("J√°t√©kos 1 politikai n√©zete", options, index=options.index(_jat√©kos_1_politikai_n√©zete))

        with cm2:
            j√°t√©kos_2_neve = st.text_input("J√°t√©kos 2 neve", value=get_query_param("player_2_name"))
            ellen_index = 1 - options.index(j√°t√©kos_1_politikai_n√©zete)
            j√°t√©kos_2_politikai_n√©zete = st.selectbox(
                "J√°t√©kos 2 politikai n√©zete",
                options,
                index=ellen_index,
                disabled=True
            )

        st.divider()
        
        current_rounds = get_query_param("rounds")
        if current_rounds == "_":
            current_rounds = 1
        else:
            current_rounds = int(current_rounds)
            
        st.session_state.rounds = st.number_input("K√∂r√∂k sz√°ma", min_value=1, max_value=10, step=1, value=current_rounds)
        st.session_state.rounds_current = 1

        mellette_vagy_ellene = get_query_param("side")
        if mellette_vagy_ellene == "_":
            mellette_vagy_ellene = "Mellette"
            
        mellette_vagy_ellene = st.radio(
            "Minden k√∂rben mellette vagy ellene √©rveltek?",
            ("Mellette", "Ellene"),
            index=0 if mellette_vagy_ellene == "Mellette" else 1
        )

        # Set query parameters for state sharing / bookmarking
        set_query_param("player_1_name", j√°t√©kos_1_neve)
        st.session_state.player_1_name = j√°t√©kos_1_neve
        set_query_param("player_1_view", j√°t√©kos_1_politikai_n√©zete)
        st.session_state.player_1_view = j√°t√©kos_1_politikai_n√©zete
        set_query_param("player_2_name", j√°t√©kos_2_neve)
        st.session_state.player_2_name = j√°t√©kos_2_neve
        set_query_param("player_2_view", j√°t√©kos_2_politikai_n√©zete)
        st.session_state.player_2_view = j√°t√©kos_2_politikai_n√©zete
        set_query_param("rounds", st.session_state.rounds)
        # st.session_state.rounds = korok_szama
        set_query_param("side", mellette_vagy_ellene)
        st.session_state.side = mellette_vagy_ellene
        set_query_param("player_1_points", 0)
        st.session_state.player_1_points = 0
        set_query_param("player_2_points", 0)
        st.session_state.player_2_points = 0

        if st.button("J√°t√©k ind√≠t√°sa"):
            set_query_param("page", "game")
            st.session_state._init_game = True
            try:
                del st.session_state.current_card
            except:
                pass
            st.rerun()

    elif new_page == "game":
        if st.session_state.get("_init_game", False):
            st.session_state.cards = read_in_cards()
            st.session_state._init_game = False

        if "cards" not in st.session_state:
            st.warning("El≈ësz√∂r √°ll√≠tsd be a j√°t√©kot a Be√°ll√≠t√°sok f√ºl√∂n!")
            st.stop()
        else:
            game_logic()

    elif new_page == "card_ideas":
        show_all_cards()

main()



