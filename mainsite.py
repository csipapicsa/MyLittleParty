import streamlit as st

from functions import get_query_param, set_query_param, read_in_cards, show_all_cards, read_in_versions, disable_scrolling, get_and_generate_all_guide_cards, remove_leading_and_ending_space
from pages import game_logic
from time import sleep
import random

import streamlit.components.v1 as components

szabaly = """
### üé≤ Az √©n kicsi p√°rtom ‚Äì J√°t√©kszab√°lyok

**Le√≠r√°s**  
Ez egy minimum h√°rom f≈ëvel j√°tszhat√≥, tervez√©s alatt √°ll√≥ k√°rtyaj√°t√©k online verzi√≥ja, amely a politikai n√©zetek √©s √©rvek j√°t√©kos √ºtk√∂ztet√©s√©re √©p√ºl. A j√°t√©k sor√°n egy k√©pzeletbeli jobbos vagy balos p√°rt politikus√°nak b≈ër√©be b√∫jva kamp√°nyt√©m√°kat h√∫ztok, √©s azok mellett vagy ellen kell √©rvelnetek ‚Äì n√©ha m√©g a saj√°t vagy v√°lasztott politikai meggy≈ëz≈ëd√©setekkel szembemenve is.

**C√©l**  
Gy≈±jtsd a legt√∂bb szavazatot √©rveid meggy≈ëz≈ë erej√©vel! Aki a legt√∂bb pontot szerzi a j√°t√©k v√©g√©re, megnyeri a v√°laszt√°sokat.

---

### üë• J√°t√©kosok

- A j√°t√©khoz minimum h√°rom j√°t√©kos sz√ºks√©ges.
- Az egyik j√°t√©kos **baloldali**, a m√°sik **jobboldali** n√©zetet k√©pvisel. A t√∂bbiek a szavaz√≥k szerep√©t t√∂ltik be. - üí° *Tipp:* Akkor a legsz√≥rakoztat√≥bb, ha a saj√°t meggy≈ëz≈ëd√©seddel **ellent√©tes** oldalt v√°lasztasz.


---

### üÉè A k√°rty√°k

- Minden k√°rtya egy politikai kamp√°nyt√©m√°t tartalmaz.
- A k√°rty√°khoz pontszorz√≥k is tartoznak, att√≥l f√ºgg≈ëen, hogy melyik oldal sz√°m√°ra el≈ëny√∂s a t√©ma, illetve hogy a j√°t√©kos √©pp mellette vagy ellene √©rvel.  
  P√©ld√°ul: egy baloldali n√©z≈ëpont√∫ j√°t√©kos sz√°m√°ra egy balos t√©ma melletti √©rvel√©s nem j√°r szorz√≥val, de ha ugyanezen a t√©ma mellett egy jobboldali j√°t√©kos √©rvel meggy≈ëz≈ëen, b√≥nuszszorz√≥t kap. Ugyanez ford√≠tva is igaz: jobboldali n√©z≈ëpontb√≥l egy jobbos t√©ma ellen √©rvelve is szorz√≥t kaphatsz, ha √≠gy is k√©pes vagy szavazatokat szerezni.

### üé≠ Utas√≠t√°s-k√°rty√°k (opcion√°lis)

Extra kih√≠v√°s√©rt bekapcsolhatod az **utas√≠t√°s-k√°rtya rendszert**! 

- **Hogyan m≈±k√∂dik?** A be√°ll√≠t√°sokn√°l egy cs√∫szk√°val √°ll√≠thatod be, hogy mekkora es√©llyel kapjon a j√°t√©kos v√©letlenszer≈± utas√≠t√°st minden k√∂rben (0-100%).
- **Mi az utas√≠t√°s?** Egy retorikai feladat, amit be kell √©p√≠tened az √©rvel√©sedbe. P√©ld√°ul: *"Hivatkozz a p√°p√°ra!"*, *"Hib√°ztatd az oroszokat!"*, *"L√©gy szarkasztikus Trumppal!"*
- **Mi√©rt j√≥?** Kisz√°m√≠thatatlann√° √©s viccesebb√© teszi a j√°t√©kot, mert v√°ratlan ir√°nyokba kell terelned az √©rvel√©sedet.
- **Pontoz√°s:** Az utas√≠t√°sok nem adnak extra pontot ‚Äì de ha √ºgyesen haszn√°lod ≈ëket, meggy≈ëz≈ëbb lehetsz!

üí° *Tipp:* Kezd≈ëknek 20-30% es√©ly aj√°nlott, halad√≥knak 50-70% m√°r komoly kih√≠v√°s!


---

### üîÅ A j√°t√©k menete

1. **Be√°ll√≠t√°sok:**
   - √Åll√≠ts√°tok be a j√°t√©kosok neveit √©s n√©zeteit (balos vagy jobbos).
   - D√∂nts√©tek el, h√°ny k√∂rt j√°tszotok (1‚Äì10).
   - √Åll√≠ts√°tok be, mennyi id≈ë √°ll rendelkez√©sre az √©rvel√©sre (15, 30, 45, 60 m√°sodperc)
   - V√°lassz√°tok ki, hogy minden k√∂rben a j√°t√©kosok **a t√©ma mellett vagy ellene √©rvelnek**. Ez v√©gig ugyanaz marad.

2. **K√∂r√∂k:**
   - Minden k√∂r elej√©n a j√°t√©k h√∫z egy kamp√°nyk√°rty√°t.
   - Mindk√©t j√°t√©kos √©rvel (mellette vagy ellene) ameddig az ideje engedi. Mindk√©t j√°t√©kos √©rvel a t√©m√°ra.
      - Ha be van kapcsolva, v√©letlenszer≈±en kaphat a j√°t√©kos egy utas√≠t√°s-k√°rty√°t is.
   - A v√°laszt√≥k szavaznak: mindenki 1 szavazatot adhat le.
   - A szavazatokb√≥l pontok keletkeznek az adott k√°rty√°n szerepl≈ë szorz√≥k alapj√°n.

3. **Pontoz√°s:**
   - A j√°t√©k automatikusan kisz√°molja a pontokat.
   - A pontok k√∂r√∂nk√©nt √∂sszead√≥dnak.

---

### üèÜ A j√°t√©k v√©ge

- Az utols√≥ k√∂r ut√°n a j√°t√©k automatikusan ki√≠rja a nyertest.
- A gy≈ëztes az, aki a legt√∂bb pontot szerezte.


### A szer≈ë √ºzenete

- A pontoz√°s s√∫lyoz√°sa √©s a k√°rty√°k tartalma felt√∂lt√©s alatt √°ll, √©s a j√°t√©k folyamatosan fejl≈ëdik. Lehet, hogy a j√°t√©k sor√°n tal√°lkozni fogtok hib√°kkal, vagy olyan k√°rty√°kkal, amelyek teljesen nem illenek a j√°t√©kba. Ez van, √≠rjatok ilyenkor.

###### √ñtleted vagy visszajelz√©sed van?  
√çrd meg a [GitHub-oldalon](https://github.com/csipapicsa/MyLittleParty/discussions), a [Discord szerveren](https://discord.gg/AtnQJ6YcYA), vagy k√ºldd el e-mailben: **gergo pont gyori pont project[kukac]gmail.com**

---
"""

st.set_page_config(
    page_title="Az √©n kicsi p√°rtom",
    page_icon="üó≥Ô∏è",
    layout="centered",
    initial_sidebar_state="expanded",
    menu_items={
        "Get help": "https://www.facebook.com/mounitarsasjatek",
        "Report a bug": "https://discord.gg/AtnQJ6YcYA",
        "About": """
### üé≤ Az √©n kicsi p√°rtom

Egy szatirikus politikai t√°rsasj√°t√©k, ahol kamp√°nyt√©m√°k ment√©n kell √©rvelned ‚Äì ak√°r a saj√°t n√©zeteiddel szembemenve is.

###### √ñtleted vagy visszajelz√©sed van?  
√çrd meg a [GitHub-oldalon](https://github.com/csipapicsa/MyLittleParty/discussions),  
a [Discord szerveren](https://discord.gg/AtnQJ6YcYA),  
vagy k√ºldd el e-mailben: **gergo.pont.gyori.pont.project[kukac]gmail.com**
        """
    }
)





def init_variables():
    if "init_variables" not in st.session_state:
        st.session_state.init_variables = True
        st.session_state.new_game = True
        st.session_state.times_up = False
        st.session_state.rounds_current = 1
        st.session_state.player_1_points = 0
        st.session_state.player_2_points = 0
        st.session_state._init_game = False
        st.session_state.player_dictionary = {  "player_1": {"name": "Player 1", "points": 0, "view": "Balos"},
                                                "player_2": {"name": "Player 2", "points": 0, "view": "Jobbos"}}
        st.session_state.guide_lapok = get_and_generate_all_guide_cards()
        st.session_state.get_random_text = False
        st.session_state.get_random_text_chance = 100
        st.session_state.jatek_gep_ellen = False
        try:
            del st.session_state["ai_answer_generated"]
        except Exception:
            pass


def scroll_to_top():
    """F√ºggv√©ny az oldal tetej√©re val√≥ ugr√°shoz"""
    components.html("""
        <script>
            window.parent.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        </script>
    """, height=0)

def on_player1_view_change():
    st.session_state.player_1_view_state = st.session_state.player_1_view_selectbox
    set_query_param('player_1_view', st.session_state.player_1_view_state)
    ellen_state = "Jobbos" if st.session_state.player_1_view_state == "Balos" else "Balos"
    set_query_param('player_2_view', ellen_state)

@st.fragment
def main():
    st.markdown("<div id='top'></div>", unsafe_allow_html=True)
    st.markdown("#### Az √©n kicsi p√°rtom k√°rtyaj√°t√©k - teszt oldal")
    
    tab_names = ["Szab√°lyok", "Be√°ll√≠t√°sok", "J√°t√©k", "K√°rtya √∂tletek"]
    tab_keys = ["szabaly", "settings", "game", "card_ideas"]

    init_variables()
    disable_scrolling()

    font_size = 12
    st._config.set_option(f'theme.baseFontSize', font_size) # type: ignore

    # Get page from query, default to "szabaly"
    page = get_query_param("page")
    if page not in tab_keys:
        page = "szabaly"

    selected_index = tab_keys.index(page)
    current_site = tab_names[selected_index]

    # st.markdown("""
    # <style>
    #     div[data-testid="stSegmentedControl"] {
    #         display: flex;
    #         justify-content: center;
    #     }
    #     div[data-testid="stSegmentedControl"] > div {
    #         margin: 0 auto;
    #     }
    # </style>
    # """, unsafe_allow_html=True)

    # selected_tab = st.segmented_control(
    #     label="V√°lassz lapot:",
    #     options=tab_names,
    #     default=current_site,
    #     selection_mode="single",
    #     label_visibility="collapsed",
    # )

    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        selected_tab = st.segmented_control(
            label="V√°lassz lapot:",
            options=tab_names,
            default=current_site,
            selection_mode="single",
            label_visibility="collapsed",
        )

        # Update query param when user changes tab
    if selected_tab is not None and selected_tab in tab_names:
        new_page = tab_keys[tab_names.index(selected_tab)]
        if new_page != page:
            set_query_param("page", new_page)
            st.rerun()
    else:
        new_page = page  # Keep current page if selection is invalid

    
    # Content logic
    if new_page == "szabaly":
        read_in_versions()
        st.markdown(szabaly)
    elif new_page == "settings":
        st.markdown("#### Be√°ll√≠t√°sok")
        options = ["Balos", "Jobbos"]

        cm1, cm2 = st.columns(2)
        
        with cm1:
            j√°t√©kos_1_neve = st.text_input("J√°t√©kos 1 neve", value=get_query_param("player_1_name"))
            j√°t√©kos_1_neve = remove_leading_and_ending_space(j√°t√©kos_1_neve)
            
            # Initialize session state only once
            if "player_1_view_state" not in st.session_state:
                _jat√©kos_1_politikai_n√©zete = get_query_param("player_1_view")
                if _jat√©kos_1_politikai_n√©zete == "_":
                    _jat√©kos_1_politikai_n√©zete = "Balos"
                st.session_state.player_1_view_state = _jat√©kos_1_politikai_n√©zete

            j√°t√©kos_1_politikai_n√©zete = st.selectbox(
                "J√°t√©kos 1 politikai n√©zete", 
                options, 
                index=options.index(st.session_state.player_1_view_state),
                key="player_1_view_selectbox",
                on_change=on_player1_view_change
            )

        # st.warning("M√©g nem megy az ai m√≥d")
        jatek_gep_ellen = st.toggle("J√°t√©k az AI ellen", 
                            value=get_query_param("gep_ellen", return_type="bool"),
                            help="Ha ezt v√°lasztod, akkor a j√°t√©kos 2 szerep√©t az AI fogja bet√∂lteni (am√≠g van ingyenes token).",
                            key="gep_ellen")
        
        if jatek_gep_ellen and get_query_param("player_2_name") == "":
            nevek = ["J√≥zsi", "Pisti", "B√©ci", "Ren√°t√≥", "Lajoska", "Kati", "Erzsike"]
            # choose a random name
            j√°t√©kos_2_neve = random.choice(nevek)
            set_query_param("player_2_name", f"AI {j√°t√©kos_2_neve}")

        if jatek_gep_ellen != st.session_state.jatek_gep_ellen:
            st.session_state.jatek_gep_ellen = jatek_gep_ellen
            set_query_param("gep_ellen", "true" if jatek_gep_ellen else "false")
            # st.rerun()

        with cm2:
            j√°t√©kos_2_neve = st.text_input("J√°t√©kos 2 neve", value=get_query_param("player_2_name"))
            j√°t√©kos_2_neve = remove_leading_and_ending_space(j√°t√©kos_2_neve)
            ellen_index = 1 - options.index(st.session_state.player_1_view_state)
            key2 = f"player_2_view_selectbox_{ellen_index}"
            j√°t√©kos_2_politikai_n√©zete = st.selectbox(
                "J√°t√©kos 2 politikai n√©zete",
                options,
                index=ellen_index,
                disabled=True,
                key=key2
            )
        
        current_rounds = get_query_param("rounds")
        if current_rounds == "_":
            current_rounds = 1
        else:
            current_rounds = int(current_rounds)

        if "rounds" not in st.session_state:
            st.session_state.rounds = 5  # default
        if "rounds_committed" not in st.session_state:
            st.session_state.rounds_committed = st.session_state.rounds

        # UI
        new_value = st.number_input("K√∂r√∂k sz√°ma", min_value=1, max_value=10, value=st.session_state.rounds_committed)

        if new_value != st.session_state.rounds_committed:
            st.session_state.rounds_committed = new_value
            st.session_state.rounds = new_value
            set_query_param("rounds", new_value)
            st.rerun()  # <- required for immediate effect


        st.session_state.erveles_time = st.select_slider(label="H√°ny m√°sodpercig akartok √©rvelni?",
                                                         options=[15, 30, 45, 60])
        
        set_query_param("erveles_time", st.session_state.erveles_time)

        # Detect change


        st.session_state.rounds_current = 1

        # Initial default (only once)
        if "side" not in st.session_state:
            st.session_state.side = get_query_param("side") or "Mellette"

        # Show radio
        new_side = st.radio(
            "Minden k√∂rben mellette vagy ellene √©rveltek?",
            ("Mellette", "Ellene"),
            index=0 if st.session_state.side == "Mellette" else 1
        )

        st.divider()
        st.write("##### V√©letlen utas√≠t√°sok j√°t√©km√≥d:")
        st.write("A cs√∫szka be√°ll√≠tja, hogy **mekkora es√©llyel kapsz v√©letlenszer≈± utas√≠t√°st** minden k√∂rben. Ha 0-ra van √°ll√≠tva, nem kapsz utas√≠t√°st. Min√©l magasabb az √©rt√©k, ann√°l nagyobb az es√©ly, hogy kapj egyet. Az utas√≠t√°st bele kell sz≈ën√∂d az √©rvel√©sedbe.")
        esely_a_random_textre = st.slider(label="V√©letlen utas√≠t√°sok utas√≠t√°sok eses√©lye (%)", 
                                          min_value=0, 
                                          max_value=100, 
                                          step=1,
                                          value=get_query_param("get_random_text_chance", return_type="int"))
        

        if esely_a_random_textre > 0:
            st.session_state.get_random_text = True
            # st.session_state.get_random_text_chance = esely_a_random_textre


        if esely_a_random_textre != st.session_state.get_random_text_chance:
            # st.info("esely_a_random_textre")
            # st.info(esely_a_random_textre)
            # sleep(5)
            st.session_state.get_random_text_chance = esely_a_random_textre
            set_query_param("get_random_text_chance", esely_a_random_textre)
            st.rerun()  # <- required for immediate effect
        
        st.divider()

        # Detect change and rerun
        if new_side != st.session_state.side:
            st.session_state.side = new_side
            set_query_param("side", new_side)
            st.rerun()


        # Set query parameters for state sharing / bookmarking
        set_query_param("player_1_name", j√°t√©kos_1_neve)
        st.session_state.player_1_name = j√°t√©kos_1_neve
        set_query_param("player_1_view", j√°t√©kos_1_politikai_n√©zete)
        st.session_state.player_1_view = j√°t√©kos_1_politikai_n√©zete
        set_query_param("player_2_name", j√°t√©kos_2_neve)
        st.session_state.player_2_name = j√°t√©kos_2_neve
        set_query_param("player_2_view", j√°t√©kos_2_politikai_n√©zete)
        st.session_state.player_2_view = j√°t√©kos_2_politikai_n√©zete
        set_query_param("rounds", st.session_state.rounds)
        # st.session_state.rounds = korok_szama
        set_query_param("side", st.session_state.side)
        st.session_state.side = st.session_state.side
        set_query_param("player_1_points", 0)
        st.session_state.player_1_points = 0
        set_query_param("player_2_points", 0)
        st.session_state.player_2_points = 0

        if st.button("J√°t√©k ind√≠t√°sa"):
            st.session_state.new_game = False
            set_query_param("page", "game")
            st.session_state._init_game = True
            try:
                del st.session_state.current_card
            except Exception:
                pass
            st.rerun()

    elif new_page == "game":
        # st.info('no?')
        if st.session_state.get("_init_game", False):
            # set_query_param("rounds_current", 0)
            st.session_state.cards = read_in_cards()
            st.session_state._init_game = False

        if "cards" not in st.session_state:
            st.warning("El≈ësz√∂r √°ll√≠tsd be a j√°t√©kot a Be√°ll√≠t√°sok f√ºl√∂n!")
            st.stop()
        else:
            game_logic()

    elif new_page == "card_ideas":
        show_all_cards()

disable_scrolling()
main()



