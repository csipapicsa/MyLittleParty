import streamlit as st
import pandas as pd

def teszt_gorgo():
    import streamlit as st

    # Pr√≥b√°ld meg telep√≠teni: pip install streamlit-scroll-to-top
    try:
        from streamlit_scroll_to_top import scroll_to_here
        SCROLL_PACKAGE_AVAILABLE = True
        st.success("‚úÖ streamlit-scroll-to-top package el√©rhet≈ë!")
    except ImportError:
        SCROLL_PACKAGE_AVAILABLE = False
        st.error("‚ùå streamlit-scroll-to-top package nem el√©rhet≈ë!")
        st.info("Telep√≠tsd: `pip install streamlit-scroll-to-top`")

    st.title("üîù Streamlit Scroll Test")

    # Package el√©rhet≈ës√©g check
    if SCROLL_PACKAGE_AVAILABLE:
        st.markdown("### Package m≈±k√∂d√©s teszt")
        
        # Step 1: Initialize scroll state in session_state
        if 'scroll_to_top' not in st.session_state:
            st.session_state.scroll_to_top = False
            
        if 'scroll_to_header' not in st.session_state:
            st.session_state.scroll_to_header = False
        
        # Step 2: Handle the scroll-to-top action
        if st.session_state.scroll_to_top:
            scroll_to_here(0, key='top')  # Scroll to the top instantly
            st.session_state.scroll_to_top = False  # Reset the state after scrolling
        
        # Step 3: Define scroll functions
        def scroll():
            st.session_state.scroll_to_top = True
            
        def scrollheader():
            st.session_state.scroll_to_header = True
        
        # Scroll gombok a tetej√©n is
        col1, col2, col3 = st.columns(3)
        with col1:
            st.button("üîù Scroll to Top (tet√©n)", on_click=scroll, key="top_button_1")
        with col2:
            if st.button("üîù Scroll to Top 2 (tet√©n)", key="top_button_2"):
                st.session_state.scroll_to_top = True
                st.rerun()
        with col3:
            st.button("üìç Scroll to Header (tet√©n)", on_click=scrollheader, key="header_button_1")

    st.markdown("---")

    # Generate long content to test scrolling
    st.markdown("### üìÑ Hossz√∫ tartalom teszt")
    st.info("G√∂rgess le, majd haszn√°ld a scroll gombokat!")

    for i in range(100):
        if i == 25:
            if SCROLL_PACKAGE_AVAILABLE and st.session_state.scroll_to_header:
                scroll_to_here(0, key='header')  # Scroll to header
                st.session_state.scroll_to_header = False
            st.header("üéØ Header - ide is lehet scrollozni")
            st.markdown("**Ez a k√∂z√©ps≈ë header, ide is tudsz scrollozni!**")
            
            # Header scroll gombok
            col1, col2 = st.columns(2)
            with col1:
                if SCROLL_PACKAGE_AVAILABLE:
                    st.button("üîù Scroll to Top (k√∂zepe)", on_click=scroll, key="mid_top")
            with col2:
                if SCROLL_PACKAGE_AVAILABLE:
                    st.button("üìç Scroll to Header (k√∂zepe)", on_click=scrollheader, key="mid_header")
        
        elif i == 50:
            st.subheader("üèÅ F√©l√∫ton")
            st.info(f"Ez a {i+1}. sor - f√©l√∫ton vagyunk!")
            
        elif i == 75:
            st.subheader("üéÆ J√°t√©k szimul√°l√°s")
            st.markdown("**Szimul√°ljuk a te j√°t√©kodat:**")
            
            # Simulate game round
            with st.container():
                st.markdown("#### K√∂r 3/5")
                st.markdown("**T√©ma:** *Kl√≠mav√°ltoz√°s elleni k√ºzdelem*")
                st.markdown("---")
                
                col1, col2 = st.columns(2)
                with col1:
                    votes1 = st.number_input("J√°t√©kos 1 szavazatai", 0, 5, 0, key=f"votes1_{i}")
                with col2:
                    votes2 = st.number_input("J√°t√©kos 2 szavazatai", 0, 5, 0, key=f"votes2_{i}")
                
                # Simulate vote submission
                if st.button("Szavazatok r√∂gz√≠t√©se", key=f"submit_{i}"):
                    if SCROLL_PACKAGE_AVAILABLE:
                        st.session_state.scroll_to_top = True
                        st.success("Szavazatok r√∂gz√≠tve! Scrollozunk a tetej√©re...")
                        st.rerun()
                    else:
                        st.warning("Scroll package nem el√©rhet≈ë - csak √ºzenet jelenik meg")
        
        else:
            st.text(f"üìù {i + 1}. sor: Ez egy hossz√∫ teszt tartalom a scrolloz√°shoz...")

    # Bottom buttons
    st.markdown("---")
    st.markdown("### üîö Oldal v√©ge")

    if SCROLL_PACKAGE_AVAILABLE:
        col1, col2, col3 = st.columns(3)
        with col1:
            st.button("üîù Scroll to Top (alul)", on_click=scroll, key="bottom_top")
        with col2:
            if st.button("üîù Scroll to Top 2 (alul)", key="bottom_top_2"):
                st.session_state.scroll_to_top = True
                st.rerun()
        with col3:
            st.button("üìç Scroll to Header (alul)", on_click=scrollheader, key="bottom_header")

    # Debug info
    st.markdown("---")
    st.markdown("### üêõ Debug Info")
    st.json({
        "scroll_package_available": SCROLL_PACKAGE_AVAILABLE,
        "scroll_to_top": st.session_state.get('scroll_to_top', False),
        "scroll_to_header": st.session_state.get('scroll_to_header', False),
        "session_state_keys": list(st.session_state.keys())
    })

    # Instructions
    st.markdown("---")
    st.markdown("""
    ### üìã Haszn√°lati √∫tmutat√≥

    **Ha a package el√©rhet≈ë:**
    1. G√∂rgess le az oldalon
    2. Nyomd meg valamelyik "Scroll to Top" gombot
    3. Az oldal automatikusan a tetej√©re ugrik

    **Ha nem el√©rhet≈ë:**
    1. Telep√≠tsd: `pip install streamlit-scroll-to-top`
    2. Ind√≠tsd √∫jra a Streamlit alkalmaz√°st
    3. Pr√≥b√°ld √∫jra

    **A te j√°t√©kodban:**
    ```python
    # A szavazatok r√∂gz√≠t√©se gombban:
    if st.button("Szavazatok r√∂gz√≠t√©se"):
        # ... a szavaz√°si logika ...
        st.session_state.scroll_to_top = True
        st.rerun()
    ```
    """)

    # Installation command
    st.code("pip install streamlit-scroll-to-top", language="bash")

def get_query_param(key):
    try:
        return st.query_params[key]
    except KeyError:
        return "_"
    
def set_query_param(key, value):
    st.query_params[key] = value


def read_in_cards():
    cards = pd.read_csv("Az √©n kicsi p√°rtom - K√°rty√°k.csv", skiprows=1)

    cards = cards[cards["online"] == "x"]
    cards = cards[["online", "K√°rtya le√≠r√°s HUN", "T√≠pus - HUN", "Jobbos bonus", "Balos Bonus"]]
    cards["Jobbos bonus"] = cards["Jobbos bonus"].astype(int)
    cards["Balos Bonus"] = cards["Balos Bonus"].astype(int)
    # T√≠pus hun == kamp√°ny
    cards = cards[cards["T√≠pus - HUN"] == "Kamp√°ny"]
    # st.table(cards)
    return cards

def show_all_cards():
    cards = pd.read_csv("Az √©n kicsi p√°rtom - K√°rty√°k.csv", skiprows=1)
    cards = cards[["K√°rtya le√≠r√°s HUN", "T√≠pus - HUN", "Jobbos bonus", "Balos Bonus"]]
    cards = cards[
    cards["K√°rtya le√≠r√°s HUN"].notna() &
    (cards["K√°rtya le√≠r√°s HUN"].str.strip() != "")
    ]
    
    cards["Jobbos bonus"] = cards["Jobbos bonus"].astype(int, errors='ignore')
    cards["Balos Bonus"] = cards["Balos Bonus"].astype(int, errors='ignore')
    st.markdown("### **K√°rty√°k**")
    st.markdown("Csak √∫gy mutiba, hogy l√°sd, milyen k√°rty√°k vannak/lesznek a j√°t√©kban.")
    st.dataframe(cards)